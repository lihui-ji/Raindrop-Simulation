A simple case is tested to determine the label order of openFOAM blockMesh:
    The domain is set to be x(0 ~ 8) y(0 ~ 8) z(-16 ~ 0), and grid is (2 2 4). The label is ordered with increment of xyz respectively.
    The cell center label and coordiantes read:
        0: (2 2 -14)
        1: (6 2 -14)
        2: (2 6 -14)
        3: (6 6 -14)
        4: (2 2 -10)
        5: (6 2 -10)
        6: (2 6 -10)
        7: (6 6 -10)
        8: (2 2 -6)
        9: (6 2 -6)
        10: (2 6 -6)
        11: (6 6 -6)
        12: (2 2 -2)
        13: (6 2 -2)
        14: (2 6 -2)
        15: (6 6 -2)

The test cases for moving property codes:
    The result shows that the movement maintains raindrop properties (diameter as an indicator).

    case 1: raindrop is at the mid of x and y, and above vertical center
        Mesh center (m) is (0.0025 0.0025 -0.005)
        Raindrop center (m) is (0.0025 0.0025 -0.00203704)
        Equivalent raindrop diameter is 0.00100096 m
        No need to move

    case 2: raindrop is at the mid of x and y, and below vertical center
        Mesh center (m) is (0.0025 0.0025 -0.005)
        Raindrop center (m) is (0.0025 0.0025 -0.00709877)
        Equivalent raindrop diameter is 0.000998625 m
        Move all fields up 17 cells
        After move, raindrop center is (0.0025 0.0025 -0.005)
        Equivalent raindrop diameter is 0.000998625 m
        Correct boundary condititons for all fields

    case 3: raindrop is at the front top left corner
        Mesh center (m) is (0.0025 0.0025 -0.005)
        Raindrop center (m) is (0.00140244 0.00140244 -0.00203704)
        Equivalent raindrop diameter is 0.000999064 m
        Move all fields right9 cells
        Move all fields back 9 cells
        After move, raindrop center is (0.0025 0.0025 -0.00203704)
        Equivalent raindrop diameter is 0.000999064 m
        Correct boundary condititons for all fields

    case 4: raindrop is at the back top left corner
        Mesh center (m) is (0.0025 0.0025 -0.005)
        Raindrop center (m) is (0.00140244 0.00347561 -0.00203704)
        Equivalent raindrop diameter is 0.000999064 m
        Move all fields right9 cells
        Move all fields front -9 cells
        After move, raindrop center is (0.0025 0.0025 -0.00203704)
        Equivalent raindrop diameter is 0.000999064 m
        Correct boundary condititons for all fields

    case 5ï¼šraindrop is at the right front top corner
        Mesh center (m) is (0.0025 0.0025 -0.005)
        Raindrop center (m) is (0.00347561 0.00140244 -0.00203704)
        Equivalent raindrop diameter is 0.000999064 m
        Move all fields left 8 cells
        Move all fields back -8 cells
        After move, raindrop center is (0.0025 0.0025 -0.00203704)
        Equivalent raindrop diameter is 0.000999064 m
        Correct boundary condititons for all fields

    case 6: raindrop is at the right back top corner
        Mesh center (m) is (0.0025 0.0025 -0.005)
        Raindrop center (m) is (0.00347561 0.00347561 -0.00203704)
        Equivalent raindrop diameter is 0.000999064 m
        Move all fields left 8 cells
        Move all fields front 8 cells
        After move, raindrop center is (0.0025 0.0025 -0.00203704)
        Equivalent raindrop diameter is 0.000999064 m
        Correct boundary condititons for all fields

    case 7: raindrop is at the left front bottom corner
        Mesh center (m) is (0.0025 0.0025 -0.005)
        Raindrop center (m) is (0.00140244 0.00140244 -0.00808642)
        Equivalent raindrop diameter is 0.000999064 m
        Move all fields up 25 cells
        Move all fields right9 cells
        Move all fields back 9 cells
        After move, raindrop center is (0.0025 0.0025 -0.005)
        Equivalent raindrop diameter is 0.000999064 m
        Correct boundary condititons for all fields

    case 8: raindrop is at the left back bottom corner
        Mesh center (m) is (0.0025 0.0025 -0.005)
        Raindrop center (m) is (0.00140244 0.00347561 -0.00808642)
        Equivalent raindrop diameter is 0.000999064 m
        Move all fields up 25 cells
        Move all fields right9 cells
        Move all fields front -9 cells
        After move, raindrop center is (0.0025 0.0025 -0.005)
        Equivalent raindrop diameter is 0.000999064 m
        Correct boundary condititons for all fields

    case 9: raindrop is at the right front bottom corner
        Mesh center (m) is (0.0025 0.0025 -0.005)
        Raindrop center (m) is (0.00347561 0.00140244 -0.00808642)
        Equivalent raindrop diameter is 0.000999064 m
        Move all fields up 25 cells
        Move all fields left 8 cells
        Move all fields back -8 cells
        After move, raindrop center is (0.0025 0.0025 -0.005)
        Equivalent raindrop diameter is 0.000999064 m
        Correct boundary condititons for all fields

    case 10: raindrop is at the right back bottom corner
        Mesh center (m) is (0.0025 0.0025 -0.005)
        Raindrop center (m) is (0.00347561 0.00347561 -0.00808642)
        Equivalent raindrop diameter is 0.000999064 m
        Move all fields up 25 cells
        Move all fields left 8 cells
        Move all fields front 8 cells
        After move, raindrop center is (0.0025 0.0025 -0.005)
        Equivalent raindrop diameter is 0.000999064 m
        Correct boundary condititons for all fields

The test results for parallel decompose:
    The processor subdomain is ordered with increment of xyz respectively
    In each processor, the cell is ordered with increment of xyz respectively

    The domain is set to be x(0 ~ 8) y(0 ~ 8) z(-16 ~ 0), and grid is (4 4 4). The label is ordered with increment of xyz respectively.
    numberOfSubdomains 8; method simple; n (2 2 2).
    [0] The cell coordinates in order for processor 0
    [0] 8((1 1 -14) (3 1 -14) (1 3 -14) (3 3 -14) (1 1 -10) (3 1 -10) (1 3 -10) (3 3 -10))
    [1] The cell coordinates in order for processor 1
    [1] 8((5 1 -14) (7 1 -14) (5 3 -14) (7 3 -14) (5 1 -10) (7 1 -10) (5 3 -10) (7 3 -10))
    [2] The cell coordinates in order for processor 2
    [2] 8((1 5 -14) (3 5 -14) (1 7 -14) (3 7 -14) (1 5 -10) (3 5 -10) (1 7 -10) (3 7 -10))
    [3] The cell coordinates in order for processor 3
    [3] 8((5 5 -14) (7 5 -14) (5 7 -14) (7 7 -14) (5 5 -10) (7 5 -10) (5 7 -10) (7 7 -10))
    [4] The cell coordinates in order for processor 4
    [4] 8((1 1 -6) (3 1 -6) (1 3 -6) (3 3 -6) (1 1 -2) (3 1 -2) (1 3 -2) (3 3 -2))
    [5] The cell coordinates in order for processor 5
    [5] 8((5 1 -6) (7 1 -6) (5 3 -6) (7 3 -6) (5 1 -2) (7 1 -2) (5 3 -2) (7 3 -2))
    [6] The cell coordinates in order for processor 6
    [6] 8((1 5 -6) (3 5 -6) (1 7 -6) (3 7 -6) (1 5 -2) (3 5 -2) (1 7 -2) (3 7 -2))
    [7] The cell coordinates in order for processor 7
    [7] 8((5 5 -6) (7 5 -6) (5 7 -6) (7 7 -6) (5 5 -2) (7 5 -2) (5 7 -2) (7 7 -2))

    Here we need to construct a map from local processor coordinates. 
    The processor layout is npxidim, npyidim, npzidim. Dimensions are xidim_local, yidim_local and zidim_local, xidim_global, yidim_global, zidim_global.
    Every variable in following pesudocode is int type.

    Note: Need to check if each processor has same amount of cells first.
    From local index to global index:
        //For Ind_local of #npi processor, xi_local = Ind_local/(yidim_local*zidim_local), yi_local = Ind_local/(xidim_local*zidim_local), zi_local = Ind_local/(xidim_local*yidim_local)
        In #npi processor, npxi = npi/(npyidim*npzidim), npyi = npi/(npxidim*npzidim), npzi = npi/(npxidim*npyidim)
        xi_global = xi_local + xidim * npxi, yi_global = yi_local + yidim * npyi, zi_global = zi_local + zidim * npzi
        //Ind_global = xi_global + xidim_global * yi_global + xidim_global * yidim_global * zi_global
    From global index to local index:
        //For Ind_global, xi_global = Ind_global/(yidim_global*zidim_global), yi_global = Ind_global/(xidim_global*zidim_global), zi_global = Ind_global/(xidim_global*yidim_global)
        npxi = xi_global/xidim_local, npyi = yi_global/yidim_local, npzi = zi_global/zidim_local
        npi = npxi + npyi * npxidim + npzi * npxidim * npyidim;
        xi_local = xi_global%xidim_local, yi_local = yi_global%yidim_local, zi_local = zi_global%zidim_local
        //Ind_local = xi_local + xidim_local * yi_local + xidim_local * yidim_local * zi_local

    The test results mapping local to global:
    Global cell center cooridnates: 
        0 (1 1 -14)    1 (3 1 -14)    2 (5 1 -14)    3 (7 1 -14)    4 (1 3 -14)    5 (3 3 -14)    6 (5 3 -14)    7 (7 3 -14)    8 (1 5 -14)    9 (3 5 -14)    10 (5 5 -14)    11 (7 5 -14)    12 (1 7 -14)    13 (3 7 -14)    14 (5 7 -14)    15 (7 7 -14)    16 (1 1 -10)    17 (3 1 -10)    18 (5 1 -10)    19 (7 1 -10)    20 (1 3 -10)    21 (3 3 -10)    22 (5 3 -10)    23 (7 3 -10)    24 (1 5 -10)    25 (3 5 -10)    26 (5 5 -10)    27 (7 5 -10)    28 (1 7 -10)    29 (3 7 -10)    30 (5 7 -10)    31 (7 7 -10)    32 (1 1 -6)    33 (3 1 -6)    34 (5 1 -6)    35 (7 1 -6)    36 (1 3 -6)    37 (3 3 -6)  38 (5 3 -6)    39 (7 3 -6)    40 (1 5 -6)    41 (3 5 -6)    42 (5 5 -6)    43 (7 5 -6)    44 (1 7 -6)    45 (3 7 -6)    46 (5 7 -6)    47 (7 7 -6)    48 (1 1 -2)    49 (3 1 -2)    50 (5 1 -2)    51 (7 1 -2)    52 (1 3 -2)    53 (3 3 -2)    54 (5 3 -2)    55 (7 3 -2)    56 (1 5 -2)    57 (3 5 -2)    58 (5 5 -2)    59 (7 5 -2)    60 (1 7 -2)    61 (3 7 -2)    62 (5 7 -2)    63 (7 7 -2)
    After mapping to global:   
        [0] 0 (1 1 -14)  1 (3 1 -14)  4 (1 3 -14)  5 (3 3 -14)  16 (1 1 -10)  17 (3 1 -10)  20 (1 3 -10)  21 (3 3 -10)
        [1] 2 (5 1 -14)  3 (7 1 -14)  6 (5 3 -14)  7 (7 3 -14)  18 (5 1 -10)  19 (7 1 -10)  22 (5 3 -10)  23 (7 3 -10)
        [2] 8 (1 5 -14)  9 (3 5 -14)  12 (1 7 -14)  13 (3 7 -14)  24 (1 5 -10)  25 (3 5 -10)  28 (1 7 -10)  29 (3 7 -10)
        [3] 10 (5 5 -14)  11 (7 5 -14)  14 (5 7 -14)  15 (7 7 -14)  26 (5 5 -10)  27 (7 5 -10)  30 (5 7 -10)  31 (7 7 -10)
        [4] 32 (1 1 -6)  33 (3 1 -6)  36 (1 3 -6)  37 (3 3 -6)  48 (1 1 -2)  49 (3 1 -2)  52 (1 3 -2)  53 (3 3 -2)
        [5] 34 (5 1 -6)  35 (7 1 -6)  38 (5 3 -6)  39 (7 3 -6)  50 (5 1 -2)  51 (7 1 -2)  54 (5 3 -2)  55 (7 3 -2)
        [6] 40 (1 5 -6)  41 (3 5 -6)  44 (1 7 -6)  45 (3 7 -6)  56 (1 5 -2)  57 (3 5 -2)  60 (1 7 -2)  61 (3 7 -2)
        [7] 42 (5 5 -6)  43 (7 5 -6)  46 (5 7 -6)  47 (7 7 -6)  58 (5 5 -2)  59 (7 5 -2)  62 (5 7 -2)  63 (7 7 -2)

    The test results mapping global to local:
        check if local_coordinates = globalToLocal (localToGlobal (local_coordinates) )          
        Result: Passed the test of mapping global to local.            

Fields involved in the solver:
        field type: volScalarField   field name: nu
        field type: volScalarField   field name: gh
        field type: volScalarField   field name: nu1
        field type: volScalarField   field name: interfaceProperties:K
        field type: volScalarField   field name: nu2
        field type: volScalarField   field name: rho_0
        field type: volScalarField   field name: p
        field type: volScalarField   field name: alpha.water
        field type: volScalarField   field name: alpha.air
        field type: volScalarField   field name: rho
        field type: volScalarField   field name: p_rgh
        field type: volVectorField   field name: U      

The test cases for moving property parallel codes:
    Overall Properties:
        Domain physical center is (0.002 0.00075 -0.005375) m
        Domain mesh dimension is (20 20 40)
        The global mesh grid center is (9 9 19)
        Processor layout is (2 1 2)
        For each processor, the mesh dimension is (10 20 20)

    case 0: raindrop is at the center of domain
        Before moving:
        Raindrop center grid is (9 9 19)
        Raindrop center (m) is (0.002375 0.002375 -0.005125)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

        Sliding Operation: no operation in x direction, no operation in y direction, no operation in z direction.

        After moving: 
        Raindrop center grid is (9 9 19)
        Raindrop center (m) is (0.002375 0.002375 -0.005125)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m


    case 1: raindrop is at the mid of x and y, and above vertical center
        Before moving:
        Raindrop center grid is (9 9 29)
        Raindrop center (m) is (0.002375 0.002375 -0.002625)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

        Sliding Operation: no operation in x direction, no operation in y direction, move properties down 10 cell.

        After moving:
        Raindrop center grid is (9 9 19)
        Raindrop center (m) is (0.002375 0.002375 -0.005125)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

    case 2: raindrop is at the mid of x and y, and below vertical center
        Before moving:
        Raindrop center grid is (9 9 9)
        Raindrop center (m) is (0.002375 0.002375 -0.007625)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

        Sliding Operation: no operation in x direction, no operation in y direction, move properties up 10 cell.

        After moving: 
        Raindrop center grid is (9 9 19)
        Raindrop center (m) is (0.002375 0.002375 -0.005125)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

    case 3: raindrop is at the front top left corner
        Before moving:
        Raindrop center grid is (5 5 29)
        Raindrop center (m) is (0.001375 0.001375 -0.002625)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

        Sliding Operation: move properties right 4 cell, move properties back 4 cell, move properties down 10 cell.

        After moving: 
        Raindrop center grid is (9 9 19)
        Raindrop center (m) is (0.002375 0.002375 -0.005125)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

    case 4: raindrop is at the back top left corner
        Before moving:
        Raindrop center grid is (5 13 29)
        Raindrop center (m) is (0.001375 0.003375 -0.002625)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

        Sliding Operation: move properties right 4 cell, move properties front 4 cell, move properties down 10 cell.

        After moving: 
        Raindrop center grid is (9 9 19)
        Raindrop center (m) is (0.002375 0.002375 -0.005125)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

    case 5ï¼šraindrop is at the right front top corner
        Before moving:
        Raindrop center grid is (13 5 29)
        Raindrop center (m) is (0.003375 0.001375 -0.002625)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

        Sliding Operation: move properties left 4 cell, move properties back 4 cell, move properties down 10 cell.

        After moving: 
        Raindrop center grid is (9 9 19)
        Raindrop center (m) is (0.002375 0.002375 -0.005125)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

    case 6: raindrop is at the right back top corner
        Before moving:
        Raindrop center grid is (13 13 29)
        Raindrop center (m) is (0.003375 0.003375 -0.002625)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

        Sliding Operation: move properties left 4 cell, move properties front 4 cell, move properties down 10 cell.

        After moving:
        Raindrop center grid is (9 9 19)
        Raindrop center (m) is (0.002375 0.002375 -0.005125)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

    case 7: raindrop is at the left front bottom corner
        Before moving:
        Raindrop center grid is (5 5 9)
        Raindrop center (m) is (0.001375 0.001375 -0.007625)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

        Sliding Operation: move properties right 4 cell, move properties back 4 cell, move properties up 10 cell.

        After moving: 
        Raindrop center grid is (9 9 19)
        Raindrop center (m) is (0.002375 0.002375 -0.005125)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

    case 8: raindrop is at the left back bottom corner
        Before moving:
        Raindrop center grid is (5 13 9)
        Raindrop center (m) is (0.001375 0.003375 -0.007625)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

        Sliding Operation: move properties right 4 cell, move properties front 4 cell, move properties up 10 cell.

        After moving: 
        Raindrop center grid is (9 9 19)
        Raindrop center (m) is (0.002375 0.002375 -0.005125)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

    case 9: raindrop is at the right front bottom corner
        Before moving:
        Raindrop center grid is (13 5 9)
        Raindrop center (m) is (0.003375 0.001375 -0.007625)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

        Sliding Operation: move properties left 4 cell, move properties back 4 cell, move properties up 10 cell.

        After moving: 
        Raindrop center grid is (9 9 19)
        Raindrop center (m) is (0.002375 0.002375 -0.005125)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

    case 10: raindrop is at the right back bottom corner
        Before moving:
        Raindrop center grid is (13 13 9)
        Raindrop center (m) is (0.003375 0.003375 -0.007625)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

        Sliding Operation: move properties left 4 cell, move properties front 4 cell, move properties up 10 cell.

        After moving: 
        Raindrop center grid is (9 9 19)
        Raindrop center (m) is (0.002375 0.002375 -0.005125)
        Water volume ï¼ˆwater fraction > 0.5) is 4.375e-09
        Equivalent raindrop diameter is 0.0010146 m

Check results for correctAllBoundaryConditions:
    Before:
        procBoundary1to0
        {
            type            processor;
            value           uniform 0;
        }
    After:
        procBoundary1to0
        {
            type            processor;
            value           nonuniform List<scalar> 
        400
        (...)
        }
    
The problem is the phi remains unupdated. 
First trial was to define phi_tmp then assign to phi but it did not work.
Second trial was to directly calculate phi but it did not work. phi = fvc::interpolate(U) & mesh.Sf();




Initialize before time loop (global variables):
    volScalarField p_rgh;
    volVectorField U;
    surfaceScalarField phi;
    mixture (volScalarField& alpha1;  
            volScalarField& alpha2_; 
            surfaceScalarField nHatf_; 
            volScalarField K_;
            const volVectorField& U_;
            const surfaceScalarField& phi_; 
            volScalarField nu_;)
    volScalarField& alpha1(mixture.alpha1())
    volScalarField& alpha2(mixture.alpha2())
    volScalarField rho;
    volScalarField p(p_rgh + rho*gh);
    tmp<volScalarField> rAU;
    surfaceScalarField alphaPhi10; //alpha flux
    tmp<surfaceScalarField> talphaPhi1Corr0; // MULES Correction
    autoPtr<surfaceVectorField> Uf; // Only a pointer

In the loop:
    correctPhi = 0;
    local variable surfaceScalarField rhoPhi;
    local variable surfaceScalarField rhoPhiSum;
    local variable tmp<surfaceScalarField> phiCN(phi);
    update alpha1, alpha2, mixture, rhoPhi;
    rAU = 1.0/UEqn.A();
    same
    volVectorField HbyA(constrainHbyA(rAU()*UEqn.H(), U, p_rgh));
    surfaceScalarField phiHbyA;
    surfaceScalarField phig;
    solve p_rgh;
    phi = phiHbyA + p_rghEqn.flux();
    p_rgh.relax();
    U = HbyA + rAU()*fvc::reconstruct((phig + p_rghEqn.flux())/rAUf);
    p == p_rgh + rho*gh;
    rAU.clear();

The surfaceScalarField:
    field type: surfaceScalarField   field name: phi                // The surface velocity flux
    field type: surfaceScalarField   field name: rhoPhi             // The surface mass flux
    field type: surfaceScalarField   field name: phi_0              // The _0 files are not required if the simulation starts from time "0"
                                                                    // The solver will use the Euler Scheme in the first iteration and second iterations and then it will start using the backward scheme.
    field type: surfaceScalarField   field name: nHatf              // The face normal vector field (constant in static mesh grids)
    field type: surfaceScalarField   field name: ghf                // The inner product of the gravitational acceleration with the location of the face centres
    field type: surfaceScalarField   field name: alphaPhi0.water    // The phase1 face flux


The order of internal faces:
    Internal faces get ordered such that when stepping through the higher numbered neighbouring cells in incremental order one also steps through the corresponding faces in incremental order (upper-triangular ordering) 
A simple case is set to determine the order of surfacemesh:  
    domain 3*3*3 with grid 3*3*3
    internalField   nonuniform List<vector>
    54
    (
    (1 0.5 0.5)
    (0.5 1 0.5)
    (0.5 0.5 1)
    (2 0.5 0.5)
    (1.5 1 0.5)
    (1.5 0.5 1)
    (2.5 1 0.5)
    (2.5 0.5 1)
    (1 1.5 0.5)
    (0.5 2 0.5)
    (0.5 1.5 1)
    (2 1.5 0.5)
    (1.5 2 0.5)
    (1.5 1.5 1)
    (2.5 2 0.5)
    (2.5 1.5 1)
    (1 2.5 0.5)
    (0.5 2.5 1)
    (2 2.5 0.5)
    (1.5 2.5 1)
    (2.5 2.5 1)
    (1 0.5 1.5)
    (0.5 1 1.5)
    (0.5 0.5 2)
    (2 0.5 1.5)
    (1.5 1 1.5)
    (1.5 0.5 2)
    (2.5 1 1.5)
    (2.5 0.5 2)
    (1 1.5 1.5)
    (0.5 2 1.5)
    (0.5 1.5 2)
    (2 1.5 1.5)
    (1.5 2 1.5)
    (1.5 1.5 2)
    (2.5 2 1.5)
    (2.5 1.5 2)
    (1 2.5 1.5)
    (0.5 2.5 2)
    (2 2.5 1.5)
    (1.5 2.5 2)
    (2.5 2.5 2)
    (1 0.5 2.5)
    (0.5 1 2.5)
    (2 0.5 2.5)
    (1.5 1 2.5)
    (2.5 1 2.5)
    (1 1.5 2.5)
    (0.5 2 2.5)
    (2 1.5 2.5)
    (1.5 2 2.5)
    (2.5 2 2.5)
    (1 2.5 2.5)
    (2 2.5 2.5)
    )
    ;

    boundaryField
    {
        left
        {
            type            sliced;
            value           nonuniform List<vector> 9((0 0.5 0.5) (0 1.5 0.5) (0 2.5 0.5) (0 0.5 1.5) (0 1.5 1.5) (0 2.5 1.5) (0 0.5 2.5) (0 1.5 2.5) (0 2.5 2.5));
        }
        right
        {
            type            sliced;
            value           nonuniform List<vector> 9((3 0.5 0.5) (3 1.5 0.5) (3 2.5 0.5) (3 0.5 1.5) (3 1.5 1.5) (3 2.5 1.5) (3 0.5 2.5) (3 1.5 2.5) (3 2.5 2.5));
        }
        bot
        {
            type            sliced;
            value           nonuniform List<vector> 9((0.5 0 0.5) (0.5 0 1.5) (0.5 0 2.5) (1.5 0 0.5) (1.5 0 1.5) (1.5 0 2.5) (2.5 0 0.5) (2.5 0 1.5) (2.5 0 2.5));
        }
        top
        {
            type            sliced;
            value           nonuniform List<vector> 9((0.5 3 0.5) (0.5 3 1.5) (0.5 3 2.5) (1.5 3 0.5) (1.5 3 1.5) (1.5 3 2.5) (2.5 3 0.5) (2.5 3 1.5) (2.5 3 2.5));
        }
        defaultFaces
        {
            type            sliced;
            value           nonuniform List<vector> 0();
        }
    }
    
On 7/31/2021 Correct bug which calculates npxi, npyi, npzi from npi

Get the boundary faces list of each processor.





